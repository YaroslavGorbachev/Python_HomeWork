# #–ó–∞–¥–∞–Ω–∏–µ 1:–í—ã—á–∏—Å–ª–∏—Ç—å —á–∏—Å–ª–æ c –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é d
# import math
# n = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π: '))
# print('–ß–∏—Å–ª–æ ùúã: {:.50f}'.format(math.pi))
# a = math.pi
# b = round(a,n+1)*10**n
# c = math.modf(b)
# a = c[1] / 10**n
# print('–ß–∏—Å–ª–æ ùúã —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é:',a)


# #–ó–∞–¥–∞–Ω–∏–µ 2:–ó–∞–¥–∞–π—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ N. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–∞–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—ã—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π —á–∏—Å–ª–∞ N

# n=int(input("Integer: ")) 
# factors = []
# d = 2
# m = n 
# while d * d <= n:
#         if n % d == 0:
#             factors.append(d)
#             n//=d
#         else:
#             d += 1
# factors.append(n)
# print('{} = {}' .format(n,factors))


# #–ó–∞–¥–∞–Ω–∏–µ 3:–ó–∞–¥–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
# a = [1, 2, 2, 3, 4, 6, 8, 8, 2, 9, 7, 4, 9]
# i = a[0]
# c = []
# for i in a:
#     if i in c:
#        continue
#     else:
#        c.append(i)
# print(c)


# #–ó–∞–¥–∞–Ω–∏–µ 4:–ó–∞–¥–∞–Ω–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å k. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–ø–∏—Å–æ–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 100)
# #–º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –º–Ω–æ–≥–æ—á–ª–µ–Ω —Å—Ç–µ–ø–µ–Ω–∏ k.

# import itertools
# k = randint(2, 8)
# def get_ratios(k):
#     ratios = [randint(0, 100) for i in range (k + 1)]
#     while ratios[0] == 0:
#         ratios[0] = randint(1, 100) 
#     return ratios
# def get_polynomial(k, ratios):
#     var = ['*x^']*(k-1) + ['*x']
#     polynomial = [[a, b, c] for a, b, c  in itertools.zip_longest(ratios, var, range(k, 1, -1), fillvalue = '') if a !=0]
#     for x in polynomial:
#         x.append(' + ')
#     polynomial = list(itertools.chain(*polynomial))
#     polynomial[-1] = ' = 0'
#     return "".join(map(str, polynomial)).replace(' 1*x',' x')
# ratios = get_ratios(k)
# polynom1 = get_polynomial(k, ratios)
# print(polynom1)
# with open('file.txt, 'w') as data:
#     data.write(polynom1)

# #–ó–∞–¥–∞–Ω–∏–µ 5:–î–∞–Ω—ã –¥–≤–∞ —Ñ–∞–π–ª–∞, –≤ –∫–∞–∂–¥–æ–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–ø–∏—Å—å –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞. –ó–∞–¥–∞—á–∞ - —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—É–º–º—É –º–Ω–æ–≥–æ—á–ª–µ–Ω–æ–≤.
# from itertools import *
# from Task033 import get_polynomial
# import os
# os.system("cls")

# file1 = 'file.txt.txt'
# file2 = 'file_2.txt'
# def read_pol(file): 
#     with open(str(file), 'r') as data:
#         pol = data.read()
#     return pol
# def convert_pol(pol):  
#     pol.replace('= 0', '')
#     pol = pol.split(' + ')
#     pol = [i[0] for i in pol]
#     for i in range(len(pol)):
#         if pol[i] == 'x':
#             pol[i] = '1'
#     pol = pol[::-1]
#     return pol
# pol1 = read_pol(file1)
# pol2 = read_pol(file2)
# print('–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª–∏–Ω–æ–º—ã:')
# print(pol1)
# print(pol2)
# print('_'*30)
# print(convert_pol(pol1))
# print(convert_pol(pol2))
# pol1_coef = list(map(int, convert_pol(pol1)))
# pol2_coef = list(map(int, convert_pol(pol2)))
# print(pol1_coef)
# print(pol2_coef)
# print('_'*30)
# sum_coef = list(map(sum, zip_longest(pol1_coef, pol2_coef, fillvalue=0)))
# print(sum_coef)
# sum_coef = sum_coef[::-1]
# print(sum_coef)
# sum_pol = get_polynomial(len(sum_coef)-1, sum_coef)
# print('–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª–∏–Ω–æ–º–æ–≤:\n', sum_pol)
# with open('task034.txt', 'w') as file_sum:
#     file_sum.writelines(sum_pol)